// || (ИЛИ):

/*
Синтаксис:
result = a || b;

Комбинации:
console.log( true || true );   // true
console.log( false || true );  // true
console.log( true || false );  // true
console.log( false || false ); // false
*/


// Если значение не логического типа, то оно к нему приводится в целях вычислений:

/*
if (1 || 0) { // работает как if( true || false )
  console.log( 'truthy!' );
}
*/


/*let hour = 9;
if (hour < 10 || hour > 18) {
    console.log('Офис закрыт.');
} else {
    console.log('Заходите, гости дорогие!');
}
*/


/*
let hour = 12;
let isWeekend = true;
if (hour < 10 || hour > 18 || isWeekend) {
  console.log( 'Офис закрыт.' ); // это выходной
}
*/


// Первое истинное значение:

/*
Синтаксис:
result = value1 || value2 || value3;
*/

// Примеры:
/*
console.log( 1 || 0 );
console.log( true || 'no matter what' );
console.log( null || 1 ); 
console.log( null || 0 || 1 ); 
console.log( undefined || null || 0 ); 
*/


// Получение первого истинного значения из списка переменных или выражений:

/*
let currentUser = null;
let defaultUser = "John";
let names = currentUser || defaultUser || "unnamed";
console.log( names );
*/


// Сокращённое вычисление:

/*
Операндами могут быть как отдельные значения, так и произвольные выражения. ИЛИ || вычисляет их слева направо. Вычисление останавливается при достижении первого истинного значения. Этот процесс называется «сокращённым вычислением», поскольку второй операнд вычисляется только в том случае, если первого недостаточно для вычисления всего выражения.
Это хорошо заметно, когда выражение, указанное в качестве второго аргумента, имеет побочный эффект, например, изменение переменной.
*/

// Примеры:
/*
let x;
true || (x = 1);
console.log(x); // undefined, потому что (x = 1) не вычисляется
*/

// Если бы первый аргумент имел значение false, то || приступил бы к вычислению второго и выполнил операцию присваивания:

/*
let x;
false || (x = 1);
console.log(x); // 1
*/
